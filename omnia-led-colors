#!/usr/bin/lua

-- settings are now in /etc/config/omnia-led-colors

local uci = require "luci.model.uci".cursor()
require "bit"
require "nixio"

local data = {wan={}, ath9k={}, ath10k={}}

function debug_print(s)
  -- uncomment this to print debug messages
  --print(s)
end

function gather_iface_bandwidth()
  local devfd = io.open("/proc/net/dev", "r")

  for line in devfd:lines() do
    local bytes_in, pkt_in, bytes_out, pkt_out
    local pat = "(%S+):%s*(%d+)%s+(%d+)%s+%d+%s+%d+%s+%d+%s+%d+%s+%d+%s+%d+%s+(%d+)%s+(%d+)%s+"
    _, _, iface, bytes_in, pkt_in, bytes_out, pkt_out = string.find(line, pat)

    if bytes_in ~= nil then
      last_data = data.wan[iface]
      local this_data = {bytes_in=bytes_in, bytes_out=bytes_out}
      if last_data ~= nil then
        this_data.bps_in = (bytes_in - last_data.bytes_in)*8
        this_data.bps_out = (bytes_out - last_data.bytes_out)*8
      end
      data.wan[iface] = this_data
    end
  end
  devfd:close()
end

function gather_ath9k(ath9k_interface)
  local this_data = {}
  local last_data = data.ath9k[ath9k_interface]
  this_data.noise = "?" -- when you first tune to a channel, the noise level isn't filled in yet

  local wlan_survey = io.popen("iw dev "..ath9k_interface.." survey dump")

  local in_freq_use = 0
  for line in wlan_survey:lines() do
    if string.find(line, '%[in use%]') ~= nil then
      in_freq_use = 1
    elseif string.find(line, "Survey data from ") ~= nil then
      in_freq_use = 0
    end

    if in_freq_use == 1 then
      local start_match, end_match, type, ms = string.find(line, "channel (%S+) time:%s+(%d+) ms")
      if type ~= nil then
        if type == "active" then
          this_data.active = ms
        elseif type == "busy" then
          this_data.busy = ms
        elseif type == "receive" then
          this_data.recv = ms
        elseif type == "transmit" then
          this_data.tx = ms
        end
      end

      local start_match, end_match, noise = string.find(line, "noise:%s+(-?%d+) dBm")
      if noise ~= nil then
        this_data.noise = noise
      end
    end
  end
  wlan_survey:close()

  if (last_data ~= nil) and (this_data.active ~= nil) then
    this_data.total_time = this_data.active - last_data.active
    this_data.busy_time = this_data.busy - last_data.busy
    this_data.pct_busy = this_data.busy_time/this_data.total_time
    debug_print("9k total "..this_data.total_time.." busy "..this_data.busy_time.." "..math.floor(this_data.pct_busy*100).."%")
  end

  data.ath9k[ath9k_interface] = this_data

  return this_data.pct_busy
end

function gather_ath10k(ath10k_phy)
  local this_data = {}
  local last_data = data.ath10k[ath10k_phy]

  local fw_stats = io.open("/sys/kernel/debug/ieee80211/"..ath10k_phy.."/ath10k/fw_stats","r")
  if fw_stats == nil then
    return
  end

  for line in fw_stats:lines() do
    local start_match, end_match, type, count = string.find(line, "^%s+(%S.*%S) count%s+(%d+)")
    if type ~= nil then
      if type == "RX clear" then -- "RX clear" they mean "channel busy"
        this_data.rx_clear = count
      elseif type == "Cycle" then
        this_data.cycle = count
      end
    end
  end
  fw_stats:close()

  if last_data ~= nil then
    if this_data.cycle < last_data.cycle then -- cycle wrap
      this_data.cdiff = this_data.cycle - last_data.cycle + 2^31
      -- all the cycle counters get divided by 2 on cycle wrap for some reason
      -- this happens at some point in the past, so *2 isn't exactly right
      this_data.cleardiff = this_data.rx_clear*2 - last_data.rx_clear
    else
      this_data.cdiff = this_data.cycle - last_data.cycle
      this_data.cleardiff = this_data.rx_clear - last_data.rx_clear
    end
    this_data.clearpct = this_data.cleardiff / this_data.cdiff
    debug_print("10k cycle "..this_data.cycle.." "..this_data.cdiff.." clear "..math.floor(this_data.clearpct*100).."%")
  end

  data.ath10k[ath10k_phy] = this_data

  return this_data.clearpct
end

function write_led(ledname, r, g, b)
  local fd = io.open("/sys/class/leds/omnia-led\:"..ledname.."/color", "w")
  fd:write(r .. " " .. g .. " " .. b)
  fd:close()
end

function dualbandwidth_led(ledname, arguments)
  local interface, limit_in, limit_out = arguments.interface, arguments.limit_in, arguments.limit_out

  local wan_data = data.wan[interface]

  if wan_data == nil then
    debug_print("interface "..interface.." not in wan data")
    return
  end

  if wan_data.bps_in == nil or wan_data.bps_out == nil then
    debug_print("interface "..interface.." not ready yet")
    return
  end

  local pct_in = wan_data.bps_in / limit_in
  local pct_out = wan_data.bps_out / limit_out

  local red, green, blue
  if pct_out > 0.5 then
    blue = math.min(math.floor(pct_out*255),255)
    green = 0
    red = 0
  else
    green = math.floor(math.max(1-pct_in,0)*255)
    red = math.min(math.floor(pct_in*255),255)
    blue = 0
  end

  debug_print(wan_data.bps_in .."^|v".. wan_data.bps_out .. " (" .. math.floor(pct_in*100) .. "% ^|v " .. math.floor(pct_out*100) .. "% "..red.." "..green.." "..blue..")")

  write_led(ledname, red, green, blue)
end

function bandwidth_led(ledname,arguments)
  local interface, direction, limit = arguments.interface, arguments.direction, arguments.limit

  --colors
  local nominal, critical = tonumber(arguments.nominal or '0x00FF00'), tonumber(arguments.critical or '0xFF0000')

  local wan_data = data.wan[interface]

  if wan_data == nil then
    debug_print("interface "..interface.." not in wan data")
    return
  end

  if wan_data.bps_in == nil or wan_data.bps_out == nil then
    debug_print("interface "..interface.." not ready yet")
    return
  end

  local pct
  if direction == "in" then
    pct = wan_data.bps_in / limit
  elseif direction == "out" then
    pct = wan_data.bps_out / limit
  end

  local colors = shift_color(nominal, critical, pct)
  local red, green, blue = colors[1], colors[2], colors[3]

  debug_print(wan_data.bps_in .."^/v".. wan_data.bps_out .. " (" .. math.floor(pct*100) .. "% "..red.." "..green .." "..blue..")")

  write_led(ledname, red, green, blue)
end

function ath9k_led(ledname,arguments)
  local interface = arguments.interface

  --colors
  local nominal, critical = tonumber(arguments.nominal or '0x00FF00'), tonumber(arguments.critical or '0xFF0000')

  local pct = gather_ath9k(interface)

  if pct == nil then
    debug_print("ath9k interface "..interface.." nil data")
    return
  end

  local colors = shift_color(nominal, critical, pct)
  local red, green, blue = colors[1], colors[2], colors[3]

  write_led(ledname, red, green, blue)
end

function ath10k_led(ledname,arguments)
  local phy = arguments.phy

  -- colors
  local nominal, critical = tonumber(arguments.nominal or '0x00FF00'), tonumber(arguments.critical or '0xFF0000')

  local pct = gather_ath10k(phy)

  if pct == nil then
    debug_print("ath10k phy "..phy.." nil data")
    return
  end

  local colors = shift_color(nominal, critical, pct)
  local red, green, blue = colors[1], colors[2], colors[3]

  write_led(ledname, red, green, blue)
end

function shift_color(nominal, critical, pct)
  local n_red, n_green, n_blue, -- nominal colors
        c_red, c_green, c_blue, -- critical colors
        a_red, a_green, a_blue  -- actual colors

  -- bitmagic our way to individual colors
  -- remember: 0xRRGGBB
  n_red   = bit.arshift(bit.band(nominal, tonumber('0xFF0000')), 16)
  n_green = bit.arshift(bit.band(nominal, tonumber('0x00FF00')), 8)
  n_blue  = bit.band(nominal, tonumber('0x0000FF'))

  c_red   = bit.arshift(bit.band(critical, tonumber('0xFF0000')), 16)
  c_green = bit.arshift(bit.band(critical, tonumber('0x00FF00')), 8)
  c_blue  = bit.band(critical, tonumber('0x0000FF'))

  -- actual color is a range between critical and nominal based on the load
  a_red   = interpolate(n_red, c_red, pct)
  a_green = interpolate(n_green, c_green, pct)
  a_blue  = interpolate(n_blue, c_blue, pct)

  return {a_red, a_green, a_blue}
end

function interpolate(nominal, critical, pct)
  pct = math.min(pct, 1)
  return math.floor((critical * pct) + (nominal * (1 - pct)))
end

function setled(led)
  local colorfunctions = {bandwidth=bandwidth_led, dualbandwidth=dualbandwidth_led, ath9k=ath9k_led, ath10k=ath10k_led}

  if colorfunctions[led.colorfunction] ~= nil then
    colorfunctions[led.colorfunction](led[".name"],led)
  else
    debug_print("colorfunction "..led.colorfunction.." unknown, ignored")
  end
end

function gather_data()
  gather_iface_bandwidth()
end

while true do
  gather_data()

  uci:foreach("omnia-led-colors", "led", setled)
  debug_print("")

  -- sleep for 1 second
  nixio.nanosleep(1)
end

